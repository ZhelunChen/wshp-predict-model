%{
Water-to-Air HP Random Forest Calibration
author: Caleb Calfa
email: cjcalfa@tamu.edu

Last Revision Notes:
%}

classdef WSHP_Local_Controller_Predictions
    % Visible Properties
    properties
        path='C:\Users\caleb\OneDrive\Documents\GitHub\heatpump-hil-mpc\tamu-hp\windows\system-identification\cooling\Local_Controller\MATLAB\Biquadratic_Speed_Prediction' % Directory Path
        sim_start=300 % min
        sim_end=1260 % min
        p_low=0.150 % kW
        ptot=101325 % Pa

        dt=900 % sec
    end

    % Hidden Properties
    properties (Access = private)        
     
    end

    methods (Static)
        %%%%%%%%%%%%%%%%%%%%%%%%%%% Error Metrics %%%%%%%%%%%%%%%%%%%%%%%%%
        function [error]=MSE(y,y_pred)
            res=(y-y_pred);
            length=height(y);

            SSE=sum(res.^2);
            error=SSE/length;
        end

        function [error]=RMSE(y,y_pred)
            res=(y-y_pred);
            length=height(y);

            SSE=sum(res.^2);
            MSE=SSE/length;
            error=sqrt(MSE);
        end

        function [error]=CVRMSE(y,y_pred)
            res=(y-y_pred);
            length=height(y);
            avg=mean(y);

            SSE=sum(res.^2);
            MSE=SSE/length;
            RMSE=sqrt(MSE);
            error=RMSE/avg;
        end

        function [error]=R2(y,y_pred)
            res=(y-y_pred);
            y_mean=ones(height(y),1)*mean(y);
            res_mean=(y-y_mean);

            SS_res=sum(res.^2);
            SS_mean=sum(res_mean.^2);
            error=1-SS_res/SS_mean;
        end

        function [error]=MBE(y,y_pred)
            res=(y_pred-y);
            length=height(y);

            SSE=sum(res);
            error=SSE/length;
        end

        %%%%%%%%%%%%%%%%%%%%%%%%% Feature Selection %%%%%%%%%%%%%%%%%%%%%%%
        % Load CSV Files in Directory
        function listing = load_files(obj)
            % Load Directory
            listing=dir(obj.path);
            index=zeros(height(listing));
            for i=1:height(listing)
                index(i)=contains(listing(i).name,'csv');
            end
            listing=listing(index==1);
        end

        % Convert RH and Tz to wz
        function [ps]=psat(Tdb)
            % Convert Celsius to Kelvin
            Tdb=Tdb+273.15;
            % Define Coefficients
            a=-5.8002206E3;
            b=1.3914993;
            c=-4.8640239E-2;
            d=4.1764768E-5;
            e=-1.4452093E-8;
            f=6.5459673;
            % Calculate Saturation Pressure (Pa)
            ps=exp(a./Tdb+b+c*Tdb+d*Tdb.^2+e*Tdb.^3+f*log(Tdb));
        end

        % wz=f(Tz,RH)
        function [wz]=wz_conv(obj,Tdb,RH)
            ps=obj.psat(Tdb);
            wz=0.622*(RH.*ps./(obj.ptot-RH.*ps));
        end

        % Read Individual CSVs
        function [HP_Mode,Sim_Time,Fan_Speed,T_ret,T_sup,wz_ret,wz_sup,Flowrate,CFM,Tw_in,Tw_out,Tz_set,Tz,Delta,q,P]=csv_corr(obj,i,list)
            % Read CSV
            file_name=list(i).name;
            table=readtable(file_name);
            % Parse Out Proper Data Columns
            HP_Mode=table.HPMode_1_11_; % Heat Pump Mode ([1,11])
            Sim_Time=table.SimulationTimeStep; % Simulation Timestep
            Fan_Speed=table.FanSpeedPercent___; % Fan Speed Percentage (%)
            % Model Features
            T_ret=table.WSHPReturnAirTemp__C_; % Heat Pump Return Air Temp (Deg C)
            T_sup=table.WSHPSupplyAirTemp__C_; % Heat Pump Supply Air Temp (Deg C)
            RH_ret=table.WSHPReturnAirRH__RH_/100; % Heat Pump Return Air RH (%)
            RH_sup=table.WSHPSupplyAirRH__RH_/100; % Heat Pump Supply Air RH (%)
            wz_ret=obj.wz_conv(obj,T_ret,RH_ret); % Heat Pump Return Humidity Ratio (kg/kg)
            wz_sup=obj.wz_conv(obj,T_sup,RH_sup); % Heat Pump Supply Humidity Ratio (kg/kg)
            Flowrate=table.WSHPWaterFlowrate_kg_s_; % Heat Pump Water Mass Flowrate (kg/s)
            CFM=table.WSHPAirFlowrate_cfm_; % Heat Pump Air Volume Flowrate (CFM)
            Tw_in=table.InletWaterTemp__C_; % Heat Pump Inlet Water Temp (Deg C)
            Tw_out=table.OutletWaterTemp__C_; % Heat Pump Outlet Water Temp (Deg C)
            %Tz_set=table.SimCoolSP__C_; % Simulated Cooling Temperature Setpoint (Deg C)
            %Tz_set=Tz_set_sim+0.833333333333333; % Active Cooling Temperature Setpoint (Deg C)
            %Tz_set=table.ActiveSetpoint__C_; % Active Cooling Temperature Setpoint (Deg C)
            Tz_set=table.ActiveSetpoint__C_-0.833333333333333; % Active Cooling Temperature Setpoint w/o Offset (Deg C)
            Tz=table.SimZoneTemp__C_; % Simulated Zone Temperature (Deg C)
            Delta=(Tz-Tz_set); % Delta Temperature Between Simulated Setpoint & Measured Zone Temperature
            % Model Response
            q_sens=table.MeasSensibleLoad_kW_; % Heat Pump Sensible Capacity (kW)
            q_lat=table.MeasLatentLoad_kW_; % Heat Pump Latent Capacity (kW)
            q=-q_sens+q_lat; % Heat Pump Total Capacity (kW)
            P=table.WSHPPower_kW_/1000; % Heat Pump Power (kW)
        end

        function [x_array]=acum_delta(x,n)
            x_array=x;
            for i=2:n
                x_apd=zeros(height(x),1);
                x_apd(i:end,:)=x(1:(end-(i-1)),:);
                x_array=[x_apd,x_array];
            end
        end

        function [x_array]=acum_error(x)
            x_array=0; % Accumulated Error Array
            x_accum=0; % Accumulated Error
            for i=1:length(x)-1
                % Update Accumulated Error
                x_accum=x_accum+x(i);
                % Append Element to Accumulated Error Array
                x_apd=x_accum;
                x_array=[x_array;x_apd];
            end
        end

        function [y]=spd_ratio(vdc)
            % Comp Speed Ratio Coefficients (vdc>=2.42)
            m1=(1-0.317)/(4.91-2.42);
            b1=0.317-2.42*m1;
            % Comp Speed Ratio Coefficients (vdc<2.42)
            m2=0.317/2.42;
            % Initialize Containers
            y=zeros(height(vdc),1);
            for i=1:height(vdc)
                if vdc(i)>=2.42
                    m=m1;
                    b=b1;
                else
                    m=m2;
                    b=0;
                end
                y(i)=m.*vdc(i)+b; % Compressor Speed [0,1]
            end
        end

        %%%%%%%%%%%%%%%%%%%%%%%%%% Linear Regression %%%%%%%%%%%%%%%%%%%%%%
        function [A,b]=load_fea_rep(obj,i,list,n) % Add Speed Calculation
            x=list(i).name;
            disp(x)

            % Load Features and Response
            [HP_Mode,Sim_Time,Fan_Speed,T_ret,T_sup,wz_ret,wz_sup,Flowrate,CFM,Tw_in,Tw_out,Tz_set,Tz,Delta,q,P]=obj.csv_corr(obj,i,list);

            % Compute Compressor Speed Signal
            vdc=zeros(height(Fan_Speed),1);
            for i=1:height(vdc)
                if Fan_Speed(i)>=49 && P(i)>obj.p_low
                    vdc(i)=(Fan_Speed(i)/100+0.0179)/0.2073; % Speed Signal Conversion
                end
            end
            
            vdc(vdc>4.91)=4.91; % Speed Signal Maximum
            vdc(vdc<0)=0;

            % Compute Compressor Speed
            y=obj.spd_ratio(vdc);
           
            % Create Concatenated Feature/Response Matrix
            Data=[HP_Mode,Sim_Time,T_ret,T_sup,wz_ret,wz_sup,Flowrate,CFM,Tw_in,Tw_out,Tz_set,Tz,Delta,q,P,y];

            % Data Cleaning
            Data=Data(Data(:,1)==4,:); % Cooling Mode Only
            Data=Data(Data(:,2)>=obj.sim_start,:); % >300 min
            Data=Data(Data(:,2)<=obj.sim_end,:); % <1260 min

            % Timetable Conversion
            Time=seconds(5:5:5*height(Data));
            Data=array2timetable(Data,'RowTimes',Time);

            % Average over MPC Control Timestep
            Data_avg=retime(Data,'regular', 'mean', 'TimeStep', seconds(obj.dt));
     
            % Features
            T_ret_avg=Data_avg.Data3;
            T_sup_avg=Data_avg.Data4;
            wz_ret_avg=Data_avg.Data5;
            wz_sup_avg=Data_avg.Data6;
            Flowrate_avg=Data_avg.Data7;
            CFM_avg=Data_avg.Data8;
            Tw_in_avg=Data_avg.Data9;
            Tw_out_avg=Data_avg.Data10;
            Tz_avg=Data_avg.Data12;
            Delta_avg=Data_avg.Data13;
            y_avg=Data_avg.Data16;
            
            Delta_avg_array=obj.acum_delta(Delta_avg,n);
            Tz_avg_array=obj.acum_delta(Tz_avg,n);
            Tz_ret_avg_array=obj.acum_delta(T_ret_avg,n);
            y_avg_array=obj.acum_delta(y_avg,n);

            % Reponses
            q_avg=Data_avg.Data14;
            P_avg=Data_avg.Data15;
            Tz_set_avg=Data_avg.Data11;

            % Cooling Error
            error_cool=Tz_avg-Tz_set_avg;

            % Accumulated Cooling Error
            accum_error_cool=obj.acum_error(error_cool);

            % Bias
            bias=ones(height(error_cool),1);

            % Current Time-Step Feature Array
            %F_cur=[y_avg,Tz_avg_array];
            %F_cur=[error_cool,accum_error_cool];
            F_cur=[bias,error_cool,error_cool.^2,accum_error_cool,accum_error_cool.^2,error_cool.*accum_error_cool];
            % Total Data Matrix
            %X=[F_cur,Tz_set_avg];
            X=[F_cur,y_avg];

            % Feature & Response Matrices
            A=X(:,1:width(F_cur));
            b=X(:,width(F_cur)+1:end);
        end

        function [A_array,b_array,file_array,list]=train_data_corr(obj,rand,perc,n)
            listing=obj.load_files(obj);
            listing_rand=listing(randperm(size(listing,1)),:);

            % Randomize (No=0,Yes=1)
            if rand==0
                list=listing;
            else
                list=listing_rand;
            end

            % Initialize Containers
            A_array=[];
            b_array=[];
            file_array="";
            
            % Initialize Iterations
            last_index=round(perc*height(list));

            % Concatenate
            for i=1:last_index
                name=list(i).name;
                [A,b]=obj.load_fea_rep(obj,i,list,n);
                A_array=[A_array;A];
                b_array=[b_array;b];
                file_array=[file_array,name];
            end
            file_array=file_array(:,2:end);
            file_array=file_array';
        end

        % Plotting Function
        function []=plt_corr(y_test,y_pred1,name)
            % Plot
            figure();
            plot(y_test);
            hold on
            plot(y_pred1)
            %hold on
            %plot(y_pred2)
            legend('True','Pred')
            ylabel("Speed Ratio ([0,1])");
            grid on;
            title(name);
        end

        % Random Forest Function
        function res=forest_fit(num,A,y)
            res = TreeBagger(num,A,y,...
                Method="regression");
        end

        % Evaluation Function
        function [train_list,test_name,CVRMSE_array_rf,R2_array_rf,CVRMSE_mean_rf,R2_mean_rf]=res_corr(obj,trees)
            % Define Training Data Set
            rand=1; % Randomize Datasets 1 = Yes , 0 = No
            perc=0.8; % Percent Training Data
            n=1; % Number of Past Delta Temperature Time Steps Utilized (Currently Unused)
            type=1; % 1 = Zone Temperature Setpoint

            [A_train,b_train,train_list,full_list]=obj.train_data_corr(obj,rand,perc,n);
            y_train=b_train(:,type);

            % Define Testing Data Set
            i_test_start=height(train_list)+1;
            i_test_end=height(full_list);

            test_list=full_list(i_test_start:i_test_end,1);
            
            % Train Random Forests / Feedforward ANN
            %reg1=obj.forest_fit(trees,A_train,y_train);
            %save("reg1.mat","reg1")
            %load("reg1.mat")
            
            % Train Least Squares Model
            maxit=100;
            tol=1e-6;
            x_opt=lsqr(A_train,b_train,tol,maxit)

            % Plot Multiple Testing Graphs
            test_name="";
            CVRMSE_array_rf=[];
            R2_array_rf=[];

            for i=1:height(test_list)
                name=test_list(i).name;
                test_name=[test_name,name];
                % Load Test Features & Response
                [A_test,b_test]=obj.load_fea_rep(obj,i,test_list,n);
                y_test=b_test(:,type);

                % Predict Response
                y_pred1=predict(reg1,A_test);
                %y_pred1=A_test*x_opt;
      
                % Calculate Random Forest Error Metrics
                CVRMSE_rf=obj.CVRMSE(y_test,y_pred1);
                R2_rf=obj.R2(y_test,y_pred1);

                CVRMSE_array_rf=[CVRMSE_array_rf;CVRMSE_rf];
                R2_array_rf=[R2_array_rf;R2_rf];
    
                % Plots % Update to Include Decision Tree
                obj.plt_corr(y_test,y_pred1,name)
            end

            test_name=test_name(:,2:end);
            test_name=test_name';
            
            % Final Error Metrics
            CVRMSE_mean_rf=mean(CVRMSE_array_rf);
            R2_mean_rf=mean(R2_array_rf);
        end

        function [cv_mean,r2_mean]=avg_error(obj,num,trees)
            i=1;
            CVRMSE_array=[];
            R2_array=[];
            while i<=num
                [~,~,~,~,CVRMSE_mean,R2_mean]=obj.res_corr(obj,trees);
                CVRMSE_array=[CVRMSE_array;CVRMSE_mean];
                R2_array=[R2_array;R2_mean];
                i=i+1;
            end
            cv_mean=mean(CVRMSE_array);
            r2_mean=mean(R2_array);
            
            %{
            % Save Outputs
            % Change Directory
            pwd_og=pwd;
            cd(strcat(pwd_og,'\Results'))
            % New Folder Creation
            f_name=strcat(string(num),'_Avg_',string(trees),'_Trees');
            mkdir(f_name)
            cd(strcat(pwd,'\',f_name))
            % Save KPIs
            save('cv_mean.mat','cv_mean')
            save('r2_mean.mat','r2_mean')
            % Change Directory Back
            cd(pwd_og)
            %}
        end
    end
end